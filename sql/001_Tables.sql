-- Schema
    CREATE SCHEMA IF NOT EXISTS rc;
    COMMENT ON SCHEMA rc IS 'RasterCaster';

-- Instellingen
	DROP TABLE IF EXISTS rc.instellingen CASCADE;
	CREATE TABLE rc.instellingen (
		variabele text UNIQUE,
		waarde text
	);
	
    INSERT INTO rc.instellingen VALUES
        ('pixelsize', '0.5'),
        ('filler_seg_dist', '5.0'),
        ('elevation_point_search_radius', '2.5')
    ;

	CREATE OR REPLACE FUNCTION rc.settings_adjusted_trigger()
	RETURNS TRIGGER AS
	$BODY$
	BEGIN
		IF NEW.variabele = 'pixelsize' 
		THEN UPDATE rc.surface_admin SET updated = now();
		END IF;

		IF NEW.variabele = 'filler_seg_dist' 
		THEN 	UPDATE rc.surface_admin AS sa 
			SET 	updated = now()
			FROM	rc.surface AS s
			WHERE 	sa.id = s.id
				AND
				s.definition_type = 'filler'
			;
		END IF;

		IF NEW.variabele = 'elevation_point_search_radius'
		THEN	UPDATE rc.surface_admin AS sa
			SET 	updated = now()
			FROM	rc.surface AS s
			WHERE	sa.id = s.id
				AND
				s.definition_type = 'tin'
			;
		END IF;
			
		RETURN NEW; 
	END;
	$BODY$ LANGUAGE plpgsql;
    
	DROP TRIGGER IF EXISTS settings_adjusted ON rc.instellingen;
	CREATE TRIGGER settings_adjusted 
	AFTER INSERT OR UPDATE ON rc.instellingen
	FOR EACH ROW 
	EXECUTE PROCEDURE rc.settings_adjusted_trigger();

    
-- Callbackfunctions
	DROP TABLE IF EXISTS rc.callbackfunctions CASCADE;
	CREATE TABLE rc.callbackfunctions (
		definition_type text UNIQUE,
		cbf_name text,
        description text
	);
    
    INSERT INTO rc.callbackfunctions VALUES 
	('NULL', 'NULL', 'NULL raster'),
	('custom', 'custom', 'Custom function definition. Use can be made of pixel, aux_1 - aux_6, param_1 - param_6. Example: "param_1 + ST_Distance(pixel, aux_1)".'),
    ('constant','constant', 'Constant value: param_1')
    ;

-- auxiliary Line 
	DROP TABLE IF EXISTS rc.auxiliary_line CASCADE;
	CREATE TABLE rc.auxiliary_line (
		id serial,
		comment text,
		autogenerated boolean DEFAULT FALSE,
		geom geometry(MultiLinestringZ, 28992) NOT NULL
	);

	ALTER TABLE rc.auxiliary_line ADD PRIMARY KEY (id);
	CREATE INDEX ON rc.auxiliary_line USING gist(geom);

-- Surfaces
	-- Table
	DROP TABLE IF EXISTS rc.surface CASCADE;
	CREATE TABLE rc.surface (
		id serial PRIMARY KEY,
		definition text DEFAULT 'NULL',
		definition_type text DEFAULT 'custom' CHECK (definition_type IN ('constant', 'custom', 'filler', 'tin')) NOT NULL,
		comment text,
		geom geometry(Polygon, 28992) NOT NULL,
		aux_1 integer REFERENCES rc.auxiliary_line(id),
		aux_2 integer REFERENCES rc.auxiliary_line(id),
		aux_3 integer REFERENCES rc.auxiliary_line(id),
		aux_4 integer REFERENCES rc.auxiliary_line(id),
		aux_5 integer REFERENCES rc.auxiliary_line(id),
		aux_6 integer REFERENCES rc.auxiliary_line(id),
		param_1 double precision,
		param_2 double precision,
		param_3 double precision,
		param_4 double precision,
		param_5 double precision,
		param_6 double precision
	)
	;

	CREATE INDEX ON rc.surface USING gist(geom);

	DROP TABLE IF EXISTS rc.surface_admin CASCADE;
	CREATE TABLE rc.surface_admin (
		id integer NOT NULL UNIQUE REFERENCES rc.surface ON DELETE CASCADE,
		rast raster,
		updated timestamp DEFAULT now(),
		exported timestamp DEFAULT '01-01-1900'::timestamp
	)
	;

    -- triggers on rc.surface to set updated to now() when something changes that may affect the raster
	CREATE OR REPLACE FUNCTION rc.raster_update_admin()
	RETURNS TRIGGER AS
	$BODY$
	BEGIN
		UPDATE rc.surface_admin SET updated = now() WHERE id = NEW.id;
		RETURN NEW; 
	END;
	$BODY$ LANGUAGE plpgsql;
    

	-- triggers on rc.surface to link with rc.surface_admin
	CREATE OR REPLACE FUNCTION rc.triggered_admin_insert()
	RETURNS TRIGGER AS
	$BODY$
	BEGIN
		INSERT INTO rc.surface_admin (id) VALUES (NEW.id);
		RETURN NEW; 
	END;
	$BODY$ LANGUAGE plpgsql;

	DROP TRIGGER IF EXISTS raster_update_admin ON rc.surface;
	CREATE TRIGGER raster_update_admin
	AFTER UPDATE ON rc.surface
	FOR EACH ROW 
	WHEN ((OLD IS DISTINCT FROM NEW) OR (NOT ST_Equals(OLD.geom, NEW.geom)))
	EXECUTE PROCEDURE rc.raster_update_admin();

	DROP TRIGGER IF EXISTS admin_insert ON rc.surface;
	CREATE TRIGGER admin_insert
	AFTER INSERT ON rc.surface
	FOR EACH ROW 
	EXECUTE PROCEDURE rc.triggered_admin_insert();

-- Elevation Point
	-- Elevation_Point: tabel
	DROP TABLE IF EXISTS rc.elevation_point CASCADE;
	CREATE TABLE rc.elevation_point (
		id serial,
		elevation double precision,
		geom geometry(Point, 28992) NOT NULL,
		geom_3d geometry(PointZ, 28992),
        in_polygon_only boolean DEFAULT false NOT NULL
	);

	ALTER TABLE rc.elevation_point ADD PRIMARY KEY (id);
	CREATE INDEX ON rc.elevation_point USING gist(geom);

	-- Elevation_Point: insert & update trigger
	CREATE OR REPLACE FUNCTION elevation_point_adjusted()
	RETURNS TRIGGER AS
	$BODY$
		DECLARE
		BEGIN
			NEW.geom_3d := ST_SetSRID(ST_MakePoint(ST_X(NEW.geom), ST_Y(NEW.geom), NEW.elevation), ST_SRID(NEW.geom));

			UPDATE rc.surface_admin AS sa 
			SET 	updated = now()
			FROM	rc.surface AS s
			WHERE 	sa.id = s.id
				AND
				s.definition_type = 'tin'
				AND
				ST_DWithin(NEW.geom, s.geom, rc.LeesInstelling('elevation_point_search_radius')::double precision)
			;
			
			RETURN NEW;
		END;
	$BODY$ LANGUAGE plpgsql;

	CREATE OR REPLACE FUNCTION elevation_point_deleted()
	RETURNS TRIGGER AS
	$BODY$
		DECLARE
		BEGIN
	
			UPDATE rc.surface_admin AS sa 
			SET 	updated = now()
			FROM	rc.surface AS s
			WHERE 	sa.id = s.id
				AND
				s.definition_type = 'tin'
				AND
				ST_DWithin(OLD.geom, s.geom, rc.LeesInstelling('elevation_point_search_radius')::double precision)
			;
			
			RETURN OLD;
		END;
	$BODY$ LANGUAGE plpgsql;
	
	
	DROP TRIGGER IF EXISTS elevation_point_trigger ON rc.elevation_point;
	CREATE TRIGGER elevation_point_trigger 
	BEFORE UPDATE OR INSERT ON rc.elevation_point
	FOR EACH ROW 
	EXECUTE PROCEDURE elevation_point_adjusted();

	DROP TRIGGER IF EXISTS elevation_point_del_trigger ON rc.elevation_point;
	CREATE TRIGGER elevation_point_del_trigger 
	BEFORE DELETE ON rc.elevation_point
	FOR EACH ROW 
	EXECUTE PROCEDURE elevation_point_deleted();


/* Testen
-- Instellingen
	INSERT INTO rc.instellingen VALUES (
		'pixelsize', '0.5'
	);

-- Invullen surfaces tabel
	-- Test met 1 waarde
	INSERT INTO rc.surfaces (definition, geom, aux_1, aux_2, aux_3) VALUES (
		'10',
		ST_SetSRID(ST_Expand(ST_MakePoint(100,100), 10), 28992),
		ST_SetSRID(ST_MakePoint(100,100), 28992),
		NULL,
		NULL
	);
	
	-- Test met punt in het midden, naar alle kanten oplopend
			INSERT INTO surfaces (definition, geom, aux_1, aux_2, aux_3) VALUES (
				'ST_Distance(pixel, aux_1)',
				ST_SetSRID(ST_Expand(ST_MakePoint(120,100), 10), 28992),
				ST_SetSRID(ST_MakePoint(120,100), 28992),
				NULL,
				NULL
			);		
	-- Test met lijn in het midden, naar beide kanten aflopend
*/
